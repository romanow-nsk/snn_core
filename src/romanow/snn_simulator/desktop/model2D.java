/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.snn_simulator.desktop;

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Graphics;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import romanow.snn_simulator.net.CBLog;
import romanow.snn_simulator.net.CBNet;
import romanow.snn_simulator.net.CBNetState;
import romanow.snn_simulator.net.MDCatch;
import romanow.snn_simulator.net.MDNetImage2D;
import romanow.snn_simulator.net.MDNeuron;
import romanow.snn_simulator.net.MDNeuron2D;

/**
 *
 * @author romanow
 */
public class model2D extends javax.swing.JFrame {
    private MDNetImage2D net= new MDNetImage2D();
    private String fname = "unnamed";
    private IImage teachImg=new NoImage(); 
    private int isRun=0;        // 0 - не запущено, 1 -выполняется, 2-прерывается
    private int base=0;
    // private Color backColor = new Color(240,240,240);
    private int x0=50,y0=50,dd=12;
    public model2D() {
        initComponents();
        setBounds(100,100,1100,670);
        createLists();
        }
    private void createLists(){
        String out[] = ImageBuilder.getImagesList();
        for(int i=0;i<out.length;i++){
            Images.addItem(out[i]);
            ImagesToShow.addItem(out[i]);
            }
        }
    private void gClear(){
        Graphics gg=G.getGraphics();
        gg.setColor(Color.white);
        gg.fillRect(0, 0, G.getWidth(), G.getHeight());
        }
    private void fire(Color color, MDNeuron nr, MDCatch ncc){
        MDNeuron2D nrr=(MDNeuron2D)nr;
        int xx = x0+nrr.getX()*dd;
        int yy = y0+nrr.getY()*dd;
        synchronized (G){
            Graphics gg = G.getGraphics();
            gg.setColor(color);
            gg.fillOval(xx, yy, 8, 8);
            if (ncc!=null){
                for(int i=ncc.size()-1;i>=0;i--){
                    MDNeuron2D nr2=(MDNeuron2D)ncc.get(i).getInput();
                    gg.drawLine(xx+4, yy+4, x0+nr2.getX()*dd+4, y0+nr2.getY()*dd+4);
                    }
                }
            }
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        G = new javax.swing.JPanel();
        TNear = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TSize = new javax.swing.JTextField();
        TMes = new javax.swing.JTextField();
        TLog = new java.awt.TextArea();
        TStep = new javax.swing.JTextField();
        TCount = new javax.swing.JTextField();
        Commands = new javax.swing.JComboBox();
        BCommand = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        checkPaint = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        TDelay = new javax.swing.JTextField();
        Img = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TShiftX = new javax.swing.JTextField();
        TShiftY = new javax.swing.JTextField();
        ImagesToShow = new javax.swing.JComboBox();
        checkIsTeach = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        Images = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        TKCatch = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        G.setBackground(new java.awt.Color(255, 255, 255));
        G.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout GLayout = new javax.swing.GroupLayout(G);
        G.setLayout(GLayout);
        GLayout.setHorizontalGroup(
            GLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 608, Short.MAX_VALUE)
        );
        GLayout.setVerticalGroup(
            GLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );

        getContentPane().add(G);
        G.setBounds(10, 11, 610, 580);

        TNear.setText("4");
        TNear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TNearActionPerformed(evt);
            }
        });
        getContentPane().add(TNear);
        TNear.setBounds(710, 70, 30, 25);

        jLabel2.setText("Размер");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(640, 40, 60, 20);

        TSize.setText("40");
        TSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TSizeActionPerformed(evt);
            }
        });
        getContentPane().add(TSize);
        TSize.setBounds(710, 40, 30, 25);
        getContentPane().add(TMes);
        TMes.setBounds(10, 600, 1030, 25);
        getContentPane().add(TLog);
        TLog.setBounds(640, 250, 400, 340);

        TStep.setText("0");
        getContentPane().add(TStep);
        TStep.setBounds(790, 110, 60, 25);

        TCount.setText("10000");
        getContentPane().add(TCount);
        TCount.setBounds(710, 110, 60, 25);

        Commands.setMaximumRowCount(20);
        Commands.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Выполнить", "Создать", "Загрузить", "Сохранить", "Статистика", "-Пустые ловушки", "Смотреть ловушки", "Входы", "Сброс", "Счетчики ловушек" }));
        Commands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommandsActionPerformed(evt);
            }
        });
        getContentPane().add(Commands);
        Commands.setBounds(640, 10, 130, 25);

        BCommand.setText("Команда");
        BCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCommandActionPerformed(evt);
            }
        });
        getContentPane().add(BCommand);
        BCommand.setBounds(790, 10, 90, 25);

        jLabel3.setText("Контакты");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(640, 70, 60, 20);

        checkPaint.setSelected(true);
        checkPaint.setText("Отображение");
        getContentPane().add(checkPaint);
        checkPaint.setBounds(790, 40, 100, 23);

        jLabel4.setText("Сдвиг Y");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(900, 40, 60, 20);

        TDelay.setText("0");
        getContentPane().add(TDelay);
        TDelay.setBounds(790, 150, 60, 25);

        Img.setBackground(new java.awt.Color(255, 255, 255));
        Img.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout ImgLayout = new javax.swing.GroupLayout(Img);
        Img.setLayout(ImgLayout);
        ImgLayout.setHorizontalGroup(
            ImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );
        ImgLayout.setVerticalGroup(
            ImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        getContentPane().add(Img);
        Img.setBounds(900, 110, 0, 80);

        jLabel5.setText("Циклов");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(640, 110, 60, 20);

        jLabel6.setText("Сдвиг X");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(900, 10, 60, 20);

        TShiftX.setText("0");
        getContentPane().add(TShiftX);
        TShiftX.setBounds(960, 10, 30, 25);

        TShiftY.setText("0");
        getContentPane().add(TShiftY);
        TShiftY.setBounds(960, 40, 30, 25);

        ImagesToShow.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ImagesToShowItemStateChanged(evt);
            }
        });
        getContentPane().add(ImagesToShow);
        ImagesToShow.setBounds(720, 210, 130, 25);

        checkIsTeach.setSelected(true);
        checkIsTeach.setText("Обучение");
        getContentPane().add(checkIsTeach);
        checkIsTeach.setBounds(790, 70, 75, 23);

        jLabel7.setText("Чувствительность");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(640, 180, 100, 20);

        Images.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ImagesItemStateChanged(evt);
            }
        });
        getContentPane().add(Images);
        Images.setBounds(900, 70, 130, 25);

        jLabel8.setText("Задержка трассировки (мс)");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(640, 150, 140, 20);

        TKCatch.setText("0.25");
        getContentPane().add(TKCatch);
        TKCatch.setBounds(790, 180, 60, 25);

        jLabel9.setText("Ловушки");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(640, 210, 60, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TNearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TNearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TNearActionPerformed

    private void TSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TSizeActionPerformed

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        teachImg.paint(Img);
    }

    private void cCreate(){
        try {
            int size= Integer.parseInt(TSize.getText());
            int near= Integer.parseInt(TNear.getText());
            net.create(size,near);
            net.save(new DataOutputStream(new FileOutputStream(fname)));
            TLog.append("создана:"+fname+"\n");
            } catch (IOException ex) {
                TMes.setText(ex.toString());
                }
        }
    
    private void cShowInputs(){
        final int shiftX = Integer.parseInt(TShiftX.getText());
        final int shiftY = Integer.parseInt(TShiftY.getText());
        if (teachImg==null){
            TMes.setText("Загрузите картинку");
            return;
            }
        gClear();
        net.paint(new CBNetState(){
            @Override
            public void onStart() {
                }
            @Override
            public void onFinish() {
                }
            @Override
            public void onNeuron(MDNeuron nr) {
                MDNeuron2D nrr = (MDNeuron2D)nr;
                int val = 255-teachImg.getPixel(nrr.getX(), nrr.getY(),net.XYSize,shiftX,shiftY);
                fire(new Color(val,val,val),nrr,null);
                }
            @Override
            public void onCatch(MDNeuron nr, MDCatch nc) {
                }
            });
        }
    
    private void cLoad(){
        try {
            FileDialog dlg0=new FileDialog(this,"Выберите файл модели",FileDialog.LOAD);
            dlg0.setFile("a.dat");
            dlg0.show();
            fname = dlg0.getFile();
            String ss=dlg0.getDirectory()+fname;
            net.load(new DataInputStream(new FileInputStream(ss)));
            TLog.append("загружена:"+dlg0.getFile()+"\n");
            } catch (IOException ex) {
                TMes.setText(ex.toString());
                }
        }
    private void cSave(){
        try {
            FileDialog dlg0=new FileDialog(this,"Выберите файл модели",FileDialog.SAVE);
            dlg0.setFile("a.snn");
            dlg0.show();
            fname = dlg0.getFile();
            String ss=dlg0.getDirectory()+fname;
            net.save(new DataOutputStream(new FileOutputStream(ss)));
            TLog.append("сохранена:"+dlg0.getFile()+"\n");
            } catch (IOException ex) {
                TMes.setText(ex.toString());
                }        
        }
    private void cStatistic(){
        base = net.showStatistic(base,new CBLog(){
            @Override
            public boolean toLog(String ss) {
                TLog.append(ss);
                return isRun==2;
                }
            }); 
        }
    private void cRemoveUnusedCatches(){
        int res = net.removeUnusedCatches();
        TLog.append("Удалено "+res+" пустых ловушек\n");
        }
    private int count=0;
    private void cShowCatches(final int iType){
        gClear();
        count=0;
        final float minK = Float.parseFloat(TKCatch.getText());
        net.paint(new CBNetState(){
            @Override
            public void onStart() {
                }
            @Override
            public void onFinish() {
                }
            @Override
            public void onNeuron(MDNeuron nr) {
                }
            @Override
            public void onCatch(MDNeuron nr, MDCatch nc) {
                MDNeuron2D nrr = (MDNeuron2D)nr;
                if (nc.getTeachImageId()==iType && nc.getKcatch() > minK){
                    fire(Color.BLACK,nrr,nc);
                    count++;
                    }
                }
            });
            TLog.append("Ловушек "+count+"\n");
        }
    private void cCalcCatchCounts(){
        TLog.append("Счетчики ловушек\n");
        int out[] = net.calcCatchCounts(4);
        for(int i=0;i<out.length;i++)
            TLog.append(""+i+":"+out[i]+"\n");
        TLog.append("Счетчики спайков\n");
        out = net.calcSpikeCounts(4);
        for(int i=0;i<out.length;i++)
            TLog.append(""+i+":"+out[i]+"\n");
        }
    private void cExec(){
        int count = Integer.parseInt(TCount.getText());
        final int delay = Integer.parseInt(TDelay.getText());
        final int shiftX = Integer.parseInt(TShiftX.getText());
        final int shiftY = Integer.parseInt(TShiftY.getText());
        gClear();
        final boolean isPaint = checkPaint.isSelected();
        boolean isTeach = checkIsTeach.isSelected();
        net.exec(count, isTeach, new CBNet(){
            @Override
            public void onStart() {
                TLog.append("Start\n");
                }
            @Override
            public void onFinish() {
                isRun=0;
                BCommand.setText("Выполнить");
                TLog.append("Finish\n");
                }
            @Override
            public void onStep(int nstep) {
                TStep.setText(""+nstep);
                }
            @Override
            public void onFatal(int nstep, Throwable ee) {
                TMes.setText(""+nstep+":"+ee.toString());
                TLog.append(""+nstep+":"+ee.toString()+"\n");
                isRun=0;
                BCommand.setText("Выполнить");
                StackTraceElement ss[] = ee.getStackTrace();
                for(int i=0;i<10;i++)
                    TLog.append(ss[i].toString()+"\n");
                }
            @Override
            public void onAxonSpike(int nstep, MDNeuron nr) {
                if (isPaint)
                    fire(Color.red,nr,null);
                }
            @Override
            public void onPaceMakerSpike(int nstep, MDNeuron nr) {
                if (isPaint)
                    fire(Color.blue,nr,null);
                }
            @Override
            public void onDendritSpike(int nstep, MDNeuron nr, MDCatch nc) {
                if (isPaint){
                    MDNeuron2D nrr = (MDNeuron2D)nr;
                    fire(Color.BLACK,nrr,nc);
                    delay();
                    fire(Color.WHITE,nrr,nc);
                    }
                }
            @Override
            public boolean testStop() {
                return isRun==2;
                }
            @Override
            public void delay() {
                if (delay==0)
                    return;
                try {
                    Thread.sleep(delay);
                    } catch (InterruptedException ex) {}
                }
            @Override
            public void onStateRelax(int nstep, MDNeuron nr) {
                if (isPaint)
                    fire(Color.white,nr,null);
                }
            @Override
            public void onStateActive(int nstep, MDNeuron nr) {
                if (isPaint)
                    fire(Color.white,nr,null);
                }
            @Override
            public int getInputActivity(MDNeuron nr) {
                MDNeuron2D nrr = (MDNeuron2D)nr;
                int val = teachImg.getPixel(nrr.getX(), nrr.getY(),net.XYSize,shiftX,shiftY);
                return val;
                }
            @Override
            public int getTeachImageId() {
                return teachImg.getTeachImageId();
                }
            @Override
            public void onEvent(MDNeuron nr, MDCatch ch, String evt) {
                TLog.append(""+nr.getId()+":"+evt+"\n");
                }
            });
        }
    
    private void BCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCommandActionPerformed
        if (isRun==2)
            return;
        if (isRun==1){
            isRun=2;
            return;
            }
        TMes.setText("");
        final int idx = Commands.getSelectedIndex();
        final String cmd = (String)Commands.getSelectedItem();
        if (!(idx==1 || idx==2) && !net.isValid()){
            TMes.setText("Необходимо создать или загрузить модель");
            return;
            }
        isRun=1;
        BCommand.setText("Остановить");
        new Thread(){
            public void run(){
                switch(idx){
            case 0: cExec(); break;
            case 1: cCreate(); break;
            case 2: cLoad(); break;
            case 3: cSave(); break;
            case 4: cStatistic(); break;
            case 5: cRemoveUnusedCatches(); break;
            case 6: int idx = ImagesToShow.getSelectedIndex();
                    cShowCatches(ImageBuilder.getImageByType(idx).getTeachImageId()); 
                    break;
            case 7: cShowInputs(); break;
            case 8: net.hardReset(); break;
            case 9: cCalcCatchCounts(); break;
                }
            TLog.append(cmd+" выполнено\n");
            BCommand.setText("Команда");
            isRun=0;
        }}.start();
    }//GEN-LAST:event_BCommandActionPerformed

    private void CommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommandsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CommandsActionPerformed

    private void ImagesToShowItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ImagesToShowItemStateChanged

    }//GEN-LAST:event_ImagesToShowItemStateChanged

    private void ImagesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ImagesItemStateChanged
        if (evt.getStateChange()!=2)
            return;
        teachImg = ImageBuilder.getImageByType(Images.getSelectedIndex());
        try {
            teachImg.loadImage(this);
            } catch (IOException ex) {
                TMes.setText(ex.toString());
                }        
        teachImg.paint(Img);
        repaint();
    }//GEN-LAST:event_ImagesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(model2D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(model2D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(model2D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(model2D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new model2D().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCommand;
    private javax.swing.JComboBox Commands;
    private javax.swing.JPanel G;
    private javax.swing.JComboBox Images;
    private javax.swing.JComboBox ImagesToShow;
    private javax.swing.JPanel Img;
    private javax.swing.JTextField TCount;
    private javax.swing.JTextField TDelay;
    private javax.swing.JTextField TKCatch;
    private java.awt.TextArea TLog;
    private javax.swing.JTextField TMes;
    private javax.swing.JTextField TNear;
    private javax.swing.JTextField TShiftX;
    private javax.swing.JTextField TShiftY;
    private javax.swing.JTextField TSize;
    private javax.swing.JTextField TStep;
    private javax.swing.JCheckBox checkIsTeach;
    private javax.swing.JCheckBox checkPaint;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
